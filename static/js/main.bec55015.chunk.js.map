{"version":3,"sources":["components/common/HorizontalMovieList.tsx","constants/apiPaths.tsx","components/common/MovieCard.tsx","components/common/SearchBar.tsx","modules/dashboard/redux/types.tsx","components/common/Hero.tsx","modules/dashboard/redux/state.tsx","utils/fetching.tsx","modules/dashboard/repositories/movies/getNowPlaying.tsx","modules/dashboard/repositories/movies/getPopular.tsx","modules/dashboard/repositories/movies/getSearch.tsx","modules/dashboard/repositories/movies/getUpcoming.tsx","modules/dashboard/screens/DashboardScreen.tsx","modules/dashboard/redux/actions/setSearchMovies.tsx","modules/dashboard/redux/actions/setPopularMovies.tsx","modules/dashboard/redux/actions/setUpcomingMovies.tsx","modules/dashboard/redux/actions/setNowPlayingMovies.tsx","utils/validations.tsx","config/routes/Navigation.tsx","config/routes/Navigator.tsx","modules/movie/redux/types.tsx","config/routes/handlers/DashboardHandlers.tsx","modules/movie/repositories/movies/getDetails.tsx","modules/movie/redux/state.tsx","modules/movie/screens/MovieScreen.tsx","config/routes/handlers/NotFountHandlers.tsx","modules/notFount/redux/types.tsx","config/routes/handlers/index.tsx","config/routes/handlers/MovieHandlers.tsx","modules/movie/redux/actions/onDetailsFetchInitialData.tsx","modules/notFount/screens/NotFountScreen.tsx","modules/notFount/redux/actions/onNotFountFetchInitialData.tsx","modules/notFount/redux/state.tsx","modules/themes/redux/types.tsx","modules/themes/redux/actions/onThemesFetchInitialData.tsx","config/themes/lightTheme.tsx","modules/themes/redux/state.tsx","config/themes/darkTheme.tsx","core/settings/reducers.tsx","modules/dashboard/redux/reducer.tsx","modules/movie/redux/reducer.tsx","modules/notFount/redux/reducer.tsx","modules/themes/redux/reducer.tsx","core/settings/store.tsx","core/settings/DataManagerProvider.tsx","core/settings/queryClient.tsx","core/settings/GlobalStyles.tsx","core/settings/ThemeManager.tsx","components/layouts/ImaxLayout.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["HorizontalMovieListTitle","styled","Typography","horizontalMovieListDefaultMovies","HorizontalMovieListContainer","div","HorizontalMovieListItemContainer","HorizontalMovieListNoScroll","HorizontalMovieList","title","error","data","isLoading","posterHeight","posterWidth","onClick","a","undefined","content","className","variant","Array","isArray","map","movie","MovieCard","nanoid","apiPaths","Ripple","ButtonBase","MovieCardContainer","MovieCardCoverMovie","MovieCardCoverImage","img","MovieCardCoverImageContainer","MovieCardContentContainer","MovieCardTitle","focusRipple","event","alt","original_title","src","poster_path","SearchBarContainer","Paper","SearchBarInput","InputBase","SearchBarIconButton","IconButton","SearchBarDivider","Divider","SearchBar","placeholder","query","setQuery","component","value","onChange","target","inputProps","orientation","type","aria-label","Search","DashboardActionsTypes","HeroHeader","header","HeroTitle","HeroDescription","heroDefaultSettings","dynamicBullets","HeroContainer","HeroSwiper","Swiper","height","isNumber","HeroCoverImage","Hero","setting","Grid","container","spacing","item","xs","overview","tagline","dashboardInitialMoviesCollectionState","dashboardInitialState","movies","popular","nowPlaying","upcoming","latest","recommendations","search","axios","create","baseURL","timeout","page","Promise","resolve","reject","fetching","get","params","api_key","isEmpty","includeAdult","include_adult","DashboardScreenContainer","main","DashboardScreen","history","useHistory","dispatcher","useDispatch","useState","current","useSelector","theme","dashboardMovies","dashboard","useEffect","getSearch","then","dispatch","FETCH_SEARCH_MOVIES_DATA","payload","setSearchMovies","results","getPopular","FETCH_POPULAR_MOVIES_DATA","setPopularMovies","getUpcoming","FETCH_UPCOMING_MOVIES_DATA","setUpcomingMovies","getNowPlaying","FETCH_NOW_PLAYING_MOVIES_DATA","setNowPlayingMovies","hasQueryData","onClickMovie","path","id","preventDefault","push","movieCardPosterHeight","movieCardPosterWidth","NavigationContainer","nav","NavigationList","ul","NavigationListItem","li","NavigationListItemLink","Link","NavigationListItemLinkText","Navigation","blackList","handlersCollection","filter","handler","find","name","RegExp","test","to","Navigator","routes","route","MovieActionsTypes","DashboardHandlers","pkg","exact","strict","sensitive","movieId","movieInitialState","details","adult","backdrop_path","belongs_to_collection","budget","genres","homepage","imdb_id","original_language","popularity","production_companies","production_countries","iso_3166_1","release_date","revenue","runtime","spoken_languages","status","video","vote_average","vote_count","MovieScreenContainer","NotFountActionsTypes","useParams","getDetails","Number","movieActionsTypes","FETCH_INITIAL_DATA","onMovieFetchInitialData","showInAppBar","onNotFountFetchInitialData","state","notFountInitialState","action","ThemesActionsTypes","onThemesFetchInitialData","themesInitialState","darkMode","mainContainerBackgroundColor","menuWidth","menuContainerBackgroundColor","menuItemHoverBackgroundColor","menuItemHoverTextColor","menuItemTextColor","heroItemBackgroundColor","movieCardContentContainerBackgroundColor","movieCardContentContainerHoverBackgroundColor","movieCardContentTextColor","h1","h2","h3","h4","h5","h6","subTitle1","subTitle2","body1","body2","buttonText","captionText","overlineText","combineReducers","FETCH_RECOMMENDATIONS_MOVIES_DATA","FETCH_LATEST_MOVIES_DATA","notFount","withDevTools","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","devTools","middlewares","applyMiddleware","thunk","enhancer","compose","store","createStore","reducers","SwiperCore","use","Pagination","Scrollbar","A11y","createBrowserHistory","DataManagerProvider","children","QueryClientProvider","client","queryClient","ThemeManager","QueryClient","createGlobalStyle","Object","entries","key","kebabCase","join","CssBaseline","GlobalStyles","ImaxLayoutContainer","ImaxLayout","App","handlers","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootTag","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.bec55015.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { nanoid } from 'nanoid';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nimport { MovieModel } from 'core/models';\r\nimport { MovieCard } from '.';\r\n\r\nexport interface HorizontalMovieListProps {\r\n  title: string;\r\n  error: string;\r\n  isLoading: boolean;\r\n  data: MovieModel[];\r\n  posterHeight: number;\r\n  posterWidth: number;\r\n  onClick: (event: any, movie: MovieModel) => Promise<any>;\r\n}\r\n\r\nexport const HorizontalMovieListTitle = styled(Typography)`\r\n  padding: 1rem 1rem 0 1rem;\r\n`;\r\n\r\nexport const horizontalMovieListDefaultMovies: MovieModel[] = [];\r\n\r\nexport const HorizontalMovieListContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: nowrap;\r\n  justify-content: flex-start;\r\n  align-items: stretch;\r\n  height: auto;\r\n  overflow: hidden;\r\n  overflow-x: auto;\r\n`;\r\n\r\nexport const HorizontalMovieListItemContainer = styled.div`\r\n  width: 300px;\r\n  min-width: 300px;\r\n  max-width: 300px;\r\n  overflow: hidden;\r\n  display: grid;\r\n  margin: 0 1rem 0 0;\r\n  padding: 0;\r\n\r\n  &:last-child {\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nexport const HorizontalMovieListNoScroll = styled.div`\r\n  display: grid;\r\n  grid-template-columns: auto;\r\n  grid-template-rows: auto auto;\r\n  grid-gap: 1rem;\r\n`;\r\n\r\nexport default function HorizontalMovieList({\r\n  title = '',\r\n  error = '',\r\n  data = horizontalMovieListDefaultMovies,\r\n  isLoading = true,\r\n  posterHeight = 300,\r\n  posterWidth = 300,\r\n  onClick = async () => undefined\r\n}: HorizontalMovieListProps): JSX.Element {\r\n  let content = (\r\n    <HorizontalMovieListNoScroll className=\"horizontal_movie_list__no_scroll\">\r\n      <HorizontalMovieListTitle\r\n        variant=\"h4\"\r\n        className=\"horizontal_movie_list__title\"\r\n      >\r\n        {title}\r\n      </HorizontalMovieListTitle>\r\n\r\n      <HorizontalMovieListContainer className=\"horizontal_movie_list\">\r\n        {Array.isArray(data) &&\r\n          data.map((movie: MovieModel) => (\r\n            <HorizontalMovieListItemContainer\r\n              className=\"horizontal_movie_list_item\"\r\n              key={nanoid()}\r\n            >\r\n              <MovieCard\r\n                data={movie}\r\n                posterWidth={posterWidth}\r\n                posterHeight={posterHeight}\r\n                onClick={onClick}\r\n              />\r\n            </HorizontalMovieListItemContainer>\r\n          ))}\r\n      </HorizontalMovieListContainer>\r\n    </HorizontalMovieListNoScroll>\r\n  );\r\n\r\n  if (isLoading) {\r\n    content = (\r\n      <h1 className=\"horizontal_movies_list__loading_text\">...Loading data</h1>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    content = (\r\n      <h1 className=\"horizontal_movies_list__error_text\">Was a error</h1>\r\n    );\r\n  }\r\n\r\n  return content;\r\n}\r\n","export interface ApiPathsType {\r\n  themoviedbApiKey: string;\r\n  themoviedbPostersUrl: string;\r\n  themoviedbUrl: string;\r\n}\r\nexport const apiPaths: ApiPathsType = {\r\n  themoviedbUrl: 'https://api.themoviedb.org',\r\n  themoviedbPostersUrl: 'https://image.tmdb.org/t/p/original',\r\n  themoviedbApiKey: 'e359e1ad0420182dea68eadd2515248c',\r\n};\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { ButtonBase, Typography } from '@material-ui/core';\r\n\r\nimport { MovieModel } from 'core/models';\r\n\r\nimport { apiPaths } from '../../constants';\r\n\r\nexport interface MovieCardProps {\r\n  data: MovieModel;\r\n  posterHeight: number;\r\n  posterWidth: number;\r\n  onClick: (event: any, movie: MovieModel) => Promise<any>;\r\n}\r\n\r\nexport interface MovieCardContainerProps {\r\n  className: string;\r\n  posterHeight: number;\r\n  posterWidth: number;\r\n}\r\n\r\nexport const Ripple = styled<any>(ButtonBase)`\r\n  margin: 0;\r\n  padding: 0;\r\n  display: grid;\r\n`;\r\n\r\nexport const MovieCardContainer = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: grid;\r\n  grid-template-columns: ${({ posterWidth }: MovieCardContainerProps) =>\r\n    posterWidth}px;\r\n  grid-template-rows: ${({ posterHeight }: MovieCardContainerProps) =>\r\n      posterHeight}px auto;\r\n  position: relative;\r\n  overflow: hidden;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    .movie_card_cover__movie {\r\n      visibility: visible;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const MovieCardCoverMovie = styled.div`\r\n  transition: all linear 100ms;\r\n  visibility: hidden;\r\n  //  background: var(--movie-card-content-container-hover-background-color);\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 10;\r\n`;\r\n\r\nexport const MovieCardCoverImage = styled.img`\r\n  display: block;\r\n  object-fit: cover;\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n`;\r\n\r\nexport const MovieCardCoverImageContainer = styled.div`\r\n  position: relative;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const MovieCardContentContainer = styled.div`\r\n  width: 100%;\r\n  padding: 0.5rem;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: var(--movie-card-content-container-background-color);\r\n  transition: all linear 125ms;\r\n`;\r\n\r\nexport const MovieCardTitle = styled(Typography)`\r\n  text-align: center;\r\n  color: var(--movie-card-content-text-color);\r\n`;\r\n\r\nexport default function MovieCard({\r\n  data,\r\n  posterHeight = 450,\r\n  posterWidth = 300,\r\n  onClick = async () => undefined\r\n}: MovieCardProps) {\r\n  return (\r\n    <Ripple focusRipple onClick={async (event: any) => onClick(event, data)}>\r\n      <MovieCardContainer\r\n        posterWidth={posterWidth}\r\n        posterHeight={posterHeight}\r\n        className=\"movie_card\"\r\n      >\r\n        <MovieCardCoverImageContainer className=\"movie_card_cover__image_container\">\r\n          <MovieCardCoverImage\r\n            alt={data.original_title}\r\n            src={`${apiPaths.themoviedbPostersUrl}/${data.poster_path}`}\r\n            className=\"movie_card_cover__image_container__image\"\r\n          />\r\n\r\n          <MovieCardCoverMovie className=\"movie_card_cover__movie\"></MovieCardCoverMovie>\r\n        </MovieCardCoverImageContainer>\r\n\r\n        <MovieCardContentContainer className=\"movie_card__content_container\">\r\n          <MovieCardTitle\r\n            variant=\"body1\"\r\n            className=\"movie_card__content_container__title\"\r\n          >\r\n            {data.original_title}\r\n          </MovieCardTitle>\r\n        </MovieCardContentContainer>\r\n      </MovieCardContainer>\r\n    </Ripple>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { InputBase, Paper, IconButton, Divider } from '@material-ui/core';\r\nimport { Search as SearchIcon } from '@material-ui/icons';\r\n\r\nexport interface SearchBarProps {\r\n  placeholder?: string;\r\n  query: string;\r\n  setQuery: (text: string) => any;\r\n}\r\n\r\nexport const SearchBarContainer = styled<any>(Paper)`\r\n  display: grid;\r\n  display: flex;\r\n  alignitems: center;\r\n  margin: 1rem;\r\n  flex: 1;\r\n`;\r\n\r\nexport const SearchBarInput = styled(InputBase)`\r\n  margin: 0 0 0 1rem;\r\n  width: 100%;\r\n  flex: 1;\r\n`;\r\n\r\nexport const SearchBarIconButton = styled(IconButton)`\r\n  padding: 10px;\r\n`;\r\n\r\nexport const SearchBarDivider = styled(Divider)`\r\n  height: 28px;\r\n  margin: 4px;\r\n`;\r\n\r\nexport default function SearchBar({\r\n  placeholder = 'Search',\r\n  query = '',\r\n  setQuery\r\n}: SearchBarProps) {\r\n  return (\r\n    <SearchBarContainer component=\"form\">\r\n      <SearchBarInput\r\n        placeholder={placeholder}\r\n        value={query}\r\n        onChange={async ({ target }) => setQuery(target?.value)}\r\n        inputProps={{ 'aria-label': 'search movies' }}\r\n      />\r\n\r\n      <SearchBarDivider orientation=\"vertical\" />\r\n\r\n      <SearchBarIconButton type=\"submit\" aria-label=\"search\">\r\n        <SearchIcon />\r\n      </SearchBarIconButton>\r\n    </SearchBarContainer>\r\n  );\r\n}\r\n","enum DashboardActionsTypes {\r\n  FETCH_INITIAL_DATA = '@DASHBOARD -> FETCH: initial Data',\r\n  FETCH_POPULAR_MOVIES_DATA = '@DASHBOARD -> FETCH: popular movies Data',\r\n  FETCH_NOW_PLAYING_MOVIES_DATA = '@DASHBOARD -> FETCH: now playing movies Data',\r\n  FETCH_LATEST_MOVIES_DATA = '@DASHBOARD -> FETCH: latest movies Data',\r\n  FETCH_RECOMMENDATIONS_MOVIES_DATA = '@DASHBOARD -> FETCH: recommendations movies Data',\r\n  FETCH_UPCOMING_MOVIES_DATA = '@DASHBOARD -> FETCH: upcoming movies Data',\r\n  FETCH_SEARCH_MOVIES_DATA = '@DASHBOARD -> FETCH: searching movies Data',\r\n}\r\n\r\nexport default DashboardActionsTypes;\r\n","import React from 'react';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\nimport styled from 'styled-components';\r\nimport { isNumber } from 'lodash';\r\nimport { Grid, Typography } from '@material-ui/core';\r\n\r\nimport { MovieDetailsModel } from 'core/models';\r\nimport { apiPaths } from '../../constants';\r\n\r\nexport interface HeroSetting {\r\n  dynamicBullets?: boolean;\r\n  //  Set to false to disable swiping to next slide direction (to right or bottom)\r\n  allowSlidePrev?: boolean;\r\n  //  Set to false to disable swiping to previous slide direction (to left or top)\r\n  allowSlideNext?: boolean;\r\n  //  If false, then the only way to switch the slide is use of external API functions like slidePrev or slideNext\r\n  allowTouchMove?: boolean;\r\n  //  Set to true and slider wrapper will adapt its height to the height of the currently active slide\r\n  autoHeight?: boolean;\r\n  /*\r\n        Allows to set different parameter for different responsive breakpoints (screen sizes). Not all parameters can be changed in breakpoints, only those which are not required different layout and logic, like slidesPerView, slidesPerGroup, spaceBetween, slidesPerColumn. Such parameters like loop and effect won't work\r\n        {\r\n            breakpoints: {\r\n                // when window width is >= 320px\r\n                320: {\r\n                  slidesPerView: 2,\r\n                  spaceBetween: 20\r\n                },\r\n                // when window width is >= 480px\r\n                480: {\r\n                  slidesPerView: 3,\r\n                  spaceBetween: 30\r\n                },\r\n                // when window width is >= 640px\r\n                640: {\r\n                  slidesPerView: 4,\r\n                  spaceBetween: 40\r\n                },\r\n                '@0.75': {\r\n                  slidesPerView: 2,\r\n                  spaceBetween: 20,\r\n                },\r\n                '@1.00': {\r\n                  slidesPerView: 3,\r\n                  spaceBetween: 40,\r\n                },\r\n                '@1.50': {\r\n                  slidesPerView: 4,\r\n                  spaceBetween: 50,\r\n                },\r\n            }\r\n        }\r\n    */\r\n  breakpoints?: any;\r\n  /*\r\n        Base for breakpoints (beta). Can be window or container. If set to window (by default) then breakpoint keys mean window width. If set to container then breakpoint keys treated as swiper container width\r\n        WARNING: Currently in beta and not supported by Swiper Angular, React, Svelte and Vue components\r\n    */\r\n  breakpointsBase?: string;\r\n  //  When enabled it center slides if the amount of slides less than slidesPerView. Not intended to be used loop mode and slidesPerColumn\r\n  centerInsufficientSlides?: boolean;\r\n  //  If true, then active slide will be centered, not always on the left side.\r\n  centeredSlides?: boolean;\r\n  //  If true, then active slide will be centered without adding gaps at the beginning and end of slider. Required centeredSlides: true. Not intended to be used with loop or pagination\r\n  centeredSlidesBounds?: boolean;\r\n  //  The beginning of the modifier CSS class that can be added to swiper container depending on different parameters\r\n  containerModifierClass?: string;\r\n  //  When enabled Swiper will automatically wrap slides with swiper-wrapper element, and will create required elements for navigation, pagination and scrollbar they are enabled (with their respective params object or with boolean true))\r\n  createElements?: boolean;\r\n  /*\r\n        When enabled it will use modern CSS Scroll Snap API. It doesn't support all of Swiper's features, but potentially should bring a much better performance in simple configurations.\r\n\r\n        This is what is not supported when it is enabled:\r\n        \r\n        All effects (Fade, Coverflow, Flip, Cube)\r\n        Zoom\r\n        Virtual Slides\r\n        speed parameter will have no effect\r\n        All transition start/end related events (use slideChange instead)\r\n        slidesPerGroup has limited support\r\n        centeredSlides is not supported\r\n        Changing slides with anything except touch/swipe and mousewheel will happen without transition in browsers without scrollTo.behaviour = 'smooth' support (e.g. in desktop and iOS Safari)\r\n        simulateTouch doesn't have effect and \"dragging\" with mouse doesn't work\r\n        resistance doesn't have any effect\r\n        allowSlidePrev/Next\r\n        swipeHandler\r\n        freeMode and all relevant features\r\n      */\r\n  cssMode?: boolean;\r\n  //  Can be 'horizontal' or 'vertical' (for vertical slider).\r\n  direction?: 'horizontal' | 'vertical';\r\n  //  Transition effect. Can be 'slide', 'fade', 'cube', 'coverflow' or 'flip'\r\n  edgeSwipeDetection?: string | boolean;\r\n  //  Whether Swiper initially enabled. When Swiper is disabled, it will hide all navigation elements and won't respond to any events and interactions\r\n  enabled?: boolean;\r\n  /*\r\n      CSS selector for focusable elements. Swiping will be disabled on such elements if they are \"focused\"\r\n      input, select, option, textarea, button, video, label\r\n     */\r\n  focusableElements?: string;\r\n  //  If disabled, then slider will be animated only when you release it, it will not move while you hold your finger on it\r\n  followFinger?: boolean;\r\n  //  If enabled then slides will not have fixed positions\r\n  freeMode?: boolean;\r\n  //  Minimum touchmove-velocity required to trigger free mode momentum\r\n  freeModeMinimumVelocity?: number;\r\n  //  If enabled, then slide will keep moving for a while after you release it\r\n  freeModeMomentum?: boolean;\r\n  //  Set to false if you want to disable momentum bounce in free mode\r\n  freeModeMomentumBounce?: boolean;\r\n  //  Higher value produces larger momentum bounce effect\r\n  freeModeMomentumBounceRatio?: number;\r\n  //  Higher value produces larger momentum distance after you release slider\r\n  freeModeMomentumRatio?: number;\r\n  //  Higher value produces larger momentum velocity after you release slider\r\n  freeModeMomentumVelocityRatio?: number;\r\n  //  Set to enabled to enable snap to slides positions in free mode\r\n  freeModeSticky?: boolean;\r\n  //  This option may a little improve desktop usability. If true, user will see the \"grab\" cursor when hover on Swiper\r\n  grabCursor?: boolean;\r\n  //  Swiper height (in px). Parameter allows to force Swiper height. Useful only if you initialize Swiper when it is hidden and in SSR and Test environments for correct Swiper initialization\r\n  //  WARNING: Setting this parameter will make Swiper not responsive\r\n  height?: number;\r\n  //  Whether Swiper should be initialised automatically when you create an instance. If disabled, then you need to init it manually by calling swiper.init()\r\n  init?: boolean;\r\n  //  Index number of initial slide.\r\n  initialSlide?: number;\r\n  //  Set to false if you want to disable long swipes\r\n  longSwipes?: boolean;\r\n  //  Minimal duration (in ms) to trigger swipe to next/previous slide during long swipes\r\n  longSwipesMs?: number;\r\n  //  Ratio to trigger swipe to next/previous slide during long swipes\r\n  longSwipesRatio?: number;\r\n  /*\r\n        Set to true to enable continuous loop mode\r\n        Because of nature of how the loop mode works, it will add duplicated slides. Such duplicated slides will have additional classes:\r\n        \r\n        swiper-slide-duplicate - represents duplicated slide\r\n        swiper-slide-duplicate-active - represents slide duplicated to the currently active slide\r\n        swiper-slide-duplicate-next - represents slide duplicated to the slide next to active\r\n        swiper-slide-duplicate-prev - represents slide duplicated to the slide previous to active\r\n\r\n        WARNING: If you use it along with slidesPerView: 'auto' then you need to specify loopedSlides parameter with amount of slides to loop (duplicate)\r\n      */\r\n  loop?: boolean;\r\n  //  Addition number of slides that will be cloned after creating of loop\r\n  loopAdditionalSlides?: number;\r\n  //  Enable and loop mode will fill groups with insufficient number of slides with blank slides. Good to be used with slidesPerGroup parameter\r\n  loopFillGroupWithBlank?: boolean;\r\n  //  When enabled it prevents Swiper slide prev/next transitions when transitions is already in progress (has effect when loop enabled)\r\n  loopPreventsSlide?: boolean;\r\n  //  If you use slidesPerView:'auto' with loop mode you should tell to Swiper how many slides it should loop (duplicate) using this parameter\r\n  loopedSlides?: number;\r\n  //  Set to true on Swiper for correct touch events interception. Use only on swipers that use same direction as the parent one\r\n  nested?: boolean;\r\n  //  Enable/disable swiping on elements matched to class specified in noSwipingClass\r\n  noSwiping?: boolean;\r\n  //  Specify noSwiping's element css class\r\n  noSwipingClass?: string;\r\n  //  Can be used instead of noSwipingClass to specify elements to disable swiping on. For example 'input' will disable swiping on all inputs\r\n  noSwipingSelector?: string;\r\n  //  Normalize slide index.\r\n  normalizeSlideIndex?: boolean;\r\n  //  Set to true if you also need to watch Mutations for Swiper parent elements\r\n  observeParents?: boolean;\r\n  //  Set to true if you also need to watch Mutations for Swiper slide children elements\r\n  observeSlideChildren?: boolean;\r\n  //  Set to true to enable Mutation Observer on Swiper and its elements. In this case Swiper will be updated (reinitialized) each time if you change its style (like hide/show) or modify its child elements (like adding/removing slides)\r\n  observer?: boolean;\r\n  //  Register event handlers\r\n  on?: any;\r\n  //  Passive event listeners will be used by default where possible to improve scrolling performance on mobile devices. But if you need to use e.preventDefault and you have conflict with it, then you should disable this parameter\r\n  passiveListeners?: boolean;\r\n  //  When enabled Swiper will force to load all images\r\n  preloadImages?: boolean;\r\n  //  Set to true to prevent accidental unwanted clicks on links during swiping\r\n  preventClicks?: boolean;\r\n  //  Set to true to stop clicks event propagation on links during swiping\r\n  preventClicksPropagation?: boolean;\r\n  //  When enabled it won't allow to change slides by swiping or navigation/pagination buttons during transition\r\n  preventInteractionOnTransition?: boolean;\r\n  //  Set to false if you want to disable resistant bounds\r\n  resistance?: boolean;\r\n  //  This option allows you to control resistance ratio\r\n  resistanceRatio?: number;\r\n  //    When enabled it will use ResizeObserver (if supported by browser) on swiper container to detect container resize (instead of watching for window resize)\r\n  resizeObserver?: boolean;\r\n  //  Set to true to round values of slides width and height to prevent blurry texts on usual resolution screens (if you have such)\r\n  roundLengths?: boolean;\r\n  //    Fire Transition/SlideChange/Start/End events on swiper initialization. Such events will be fired on initialization in case of your initialSlide is not 0, or you use loop mode\r\n  runCallbacksOnInit?: boolean;\r\n  //    Enabled this option and plugin will set width/height on swiper wrapper equal to total size of all slides. Mostly should be used as compatibility fallback option for browser that don't support flexbox layout well\r\n  setWrapperSize?: boolean;\r\n  //  Set to false if you want to disable short swipes\r\n  shortSwipes?: boolean;\r\n  //    If true, Swiper will accept mouse events like touch events (click and drag to change slides)\r\n  simulateTouch?: boolean;\r\n  //    CSS class name of currently active slide\r\n  //    WARNING: By changing classes you will also need to change Swiper's CSS to reflect changed classes\r\n  //    WARNING: Not supported in Swiper Angular/React/Svelte/Vue components\r\n  slideActiveClass?: string;\r\n  //    CSS class name of blank slide append to fill groups in loop mode when loopFillGroupWithBlank is also enabled\r\n  //    WARNING: By changing classes you will also need to change Swiper's CSS to reflect changed classes\r\n  //    WARNING: Not supported in Swiper Angular/React/Svelte/Vue\r\n  slideBlankClass?: string;\r\n  //  CSS class name of slide\r\n  //    WARNING: By changing classes you will also need to change Swiper's CSS to reflect changed classes\r\n  //    WARNING: Not supported in Swiper Angular/React/Svelte/Vue components\r\n  slideClass?: string;\r\n  //  CSS class name of duplicated slide which represents the currently active slide\r\n  //    WARNING: By changing classes you will also need to change Swiper's CSS to reflect changed classes\r\n  //    WARNING: Not supported in Swiper Angular/React/Svelte/Vue components\r\n  slideDuplicateActiveClass?: string;\r\n  //  CSS class name of slide duplicated by loop mode\r\n  //    WARNING: By changing classes you will also need to change Swiper's CSS to reflect changed classes\r\n  //    WARNING: Not supported in Swiper Angular/React/Svelte/Vue\r\n  slideDuplicateClass?: string;\r\n  //  CSS class name of duplicated slide which represents the slide next to active slide\r\n  //    WARNING: By changing classes you will also need to change Swiper's CSS to reflect changed classes\r\n  //    WARNING: Not supported in Swiper Angular/React/Svelte/Vue\r\n  slideDuplicateNextClass?: string;\r\n  //  CSS class name of duplicated slide which represents the slide previous to active slide\r\n  //    WARNING: By changing classes you will also need to change Swiper's CSS to reflect changed classes\r\n  //    WARNING: Not supported in Swiper Angular/React/Svelte/Vue\r\n  slideDuplicatePrevClass?: string;\r\n  //  CSS class name of slide which is right after currently active slide\r\n  //    WARNING: By changing classes you will also need to change Swiper's CSS to reflect changed classes\r\n  //    WARNING: Not supported in Swiper Angular/React/Svelte/Vue\r\n  slideNextClass?: string;\r\n  //  CSS class name of slide which is right before currently active slide\r\n  //    WARNING: By changing classes you will also need to change Swiper's CSS to reflect changed classes\r\n  //    WARNING: Not supported in Swiper Angular/React/Svelte/Vue\r\n  slidePrevClass?: string;\r\n  //  Set to true and click on any slide will produce transition to this slide\r\n  slideToClickedSlide?: boolean;\r\n  //  CSS class name of currently visible slide\r\n  //    WARNING: By changing classes you will also need to change Swiper's CSS to reflect changed classes\r\n  //    WARNING: Not supported in Swiper Angular/React/Svelte/Vue\r\n  slideVisibleClass?: string;\r\n  //  Add (in px) additional slide offset in the end of the container (after all slides)\r\n  slidesOffsetAfter?: number;\r\n  //  Add (in px) additional slide offset in the beginning of the container (before all slides)\r\n  slidesOffsetBefore?: number;\r\n  //    Number of slides per column, for multirow layout\r\n  //    WARNING: slidesPerColumn > 1 is currently not compatible with loop mode (loop: true)\r\n  slidesPerColumn?: number;\r\n  //  Can be 'column' or 'row'. Defines how slides should fill rows, by column or by row\r\n  slidesPerColumnFill?: 'row' | 'column';\r\n  //  Set numbers of slides to define and enable group sliding. Useful to use with slidesPerView > 1\r\n  slidesPerGroup?: number;\r\n  //    The parameter works in the following way: If slidesPerGroupSkip equals 0 (default), no slides are excluded from grouping, and the resulting behaviour is the same as without this change.\r\n  //\r\n  // If slidesPerGroupSkip is equal or greater than 1 the first X slides are treated as single groups, whereas all following slides are grouped by the slidesPerGroup value.\r\n  slidesPerGroupSkip?: number;\r\n  //  Number of slides per view (slides visible at the same time on slider's container).\r\n  // WARNING: If you use it with \"auto\" value and along with loop: true then you need to specify loopedSlides parameter with amount of slides to loop (duplicate)\r\n  // WARNING: slidesPerView: 'auto' is currently not compatible with multirow mode, when slidesPerColumn > 1\r\n  slidesPerView?: 'auto' | number;\r\n  //  Distance between slides in px.\r\n  //    WARNING: If you use \"margin\" css property to the elements which go into Swiper in which you pass \"spaceBetween\" into, navigation might not work property.\r\n  spaceBetween?: number;\r\n  //  Duration of transition between slides (in ms)\r\n  speed?: number;\r\n  //    String with CSS selector or HTML element of the container with pagination that will work as only available handler for swiping\r\n  swipeHandler?: HTMLElement | string;\r\n  //    Threshold value in px. If \"touch distance\" will be lower than this value then swiper will not move\r\n  threshold?: number;\r\n  //    Allowable angle (in degrees) to trigger touch move\r\n  touchAngle?: number;\r\n  //    Target element to listen touch events on. Can be 'container' (to listen for touch events on swiper-container) or 'wrapper'(to listen for touch events on swiper-wrapper)\r\n  touchEventsTarget?: 'container' | 'wrapper';\r\n  //  If enabled, then propagation of \"touchmove\" will be stopped\r\n  touchMoveStopPropagation?: boolean;\r\n  //    Touch ratio\r\n  touchRatio?: number;\r\n  //  Enable to release touch events on slider edge position (beginning, end) to allow for further page scrolling\r\n  touchReleaseOnEdges?: boolean;\r\n  //    Force to always prevent default for touchstart (mousedown) event\r\n  touchStartForcePreventDefault?: boolean;\r\n  //    If disabled, touchstart (mousedown) event won't be prevented\r\n  touchStartPreventDefault?: boolean;\r\n  //    If enabled (by default) and navigation elements' parameters passed as a string (like \".pagination\") then Swiper will look for such elements through child elements first. Applies for pagination, prev/next buttons and scrollbar elements\r\n  uniqueNavElements?: boolean;\r\n  //    When enabled Swiper will be reinitialized after all inner images ( tags) are loaded. Required preloadImages: true\r\n  updateOnImagesReady?: boolean;\r\n  //    Swiper will recalculate slides position on window resize (orientationchange)\r\n  updateOnWindowResize?: boolean;\r\n  //  Required for active slide detection when rendered on server-side and enabled history\r\n  url?: string;\r\n  //    userAgent string. Required for browser/device detection when rendered on server-side\r\n  userAgent?: string;\r\n  //    Enabled this option and swiper will be operated as usual except it will not move, real translate values on wrapper will not be set. Useful when you may need to create custom slide transition\r\n  virtualTranslate?: boolean;\r\n  //    When enabled Swiper will be disabled and hide navigation buttons on case there are not enough slides for sliding.\r\n  watchOverflow?: boolean;\r\n  //    Enable this feature to calculate each slides progress\r\n  watchSlidesProgress?: boolean;\r\n  //    watchSlidesProgress should be enabled. Enable this option and slides that are in viewport will have additional visible class\r\n  watchSlidesVisibility?: boolean;\r\n  //  Swiper width (in px). Parameter allows to force Swiper width. Useful only if you initialize Swiper when it is hidden and in SSR and Test environments for correct Swiper initialization\r\n  //    WARNING: Setting this parameter will make Swiper not responsive\r\n  width?: number;\r\n  //    CSS class name of slides' wrapper\r\n  //    WARNING: By changing classes you will also need to change Swiper's CSS to reflect changed classes\r\n  //    WARNING: Not supported in Swiper Angular/React/Svelte/Vue\r\n  wrapperClass?: string;\r\n  //  Add event listener that will be fired on all events\r\n  onAny?: (event: any, ...args: any) => any;\r\n}\r\n\r\nexport interface HeroProps {\r\n  height?: number | string;\r\n  setting?: HeroSetting;\r\n  data: MovieDetailsModel;\r\n}\r\n\r\nexport interface HeroContainerProps {\r\n  height?: number | string;\r\n}\r\n\r\nexport const HeroHeader = styled.header`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: var(--hero-item-background-color);\r\n`;\r\n\r\nexport const HeroTitle = styled(Typography)`\r\n  color: white;\r\n`;\r\n\r\nexport const HeroDescription = styled(Typography)`\r\n  width: 100%;\r\n  padding: 0 0 0 1rem;\r\n`;\r\n\r\nconst heroDefaultSettings: HeroSetting = {\r\n  dynamicBullets: true\r\n};\r\n\r\nconst HeroContainer = styled.div``;\r\n\r\nconst HeroSwiper = styled<any>(Swiper)`\r\n  height: ${({ height = '100vh' }: HeroContainerProps) =>\r\n    isNumber(height) ? `${height}px` : height};\r\n`;\r\n\r\nexport const HeroCoverImage = styled.img`\r\n  display: block;\r\n  object-fit: cover;\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n`;\r\n\r\nexport default function Hero({\r\n  height = '100vh',\r\n  setting = heroDefaultSettings,\r\n  data\r\n}: HeroProps): JSX.Element {\r\n  return (\r\n    <HeroContainer>\r\n      <HeroSwiper height={height} className=\"hero\" {...setting}>\r\n        <SwiperSlide className=\"hero__container\">\r\n          <HeroCoverImage\r\n            alt={data.original_title}\r\n            src={`${apiPaths.themoviedbPostersUrl}/${data.poster_path}`}\r\n            className=\"hero__container__cover_image\"\r\n          />\r\n\r\n          <HeroHeader className=\"hero__container__header\">\r\n            <HeroTitle variant=\"h1\" className=\"hero__container__header__title\">\r\n              {data.original_title}\r\n            </HeroTitle>\r\n          </HeroHeader>\r\n        </SwiperSlide>\r\n      </HeroSwiper>\r\n\r\n      <br />\r\n\r\n      <Grid container spacing={4}>\r\n        <Grid item xs={12}>\r\n          <HeroDescription\r\n            variant=\"body1\"\r\n            className=\"hero__container__header__title\"\r\n          >\r\n            {data.overview}\r\n          </HeroDescription>\r\n        </Grid>\r\n\r\n        <Grid item xs={12}>\r\n          <HeroDescription\r\n            variant=\"body1\"\r\n            className=\"hero__container__header__title\"\r\n          >\r\n            {data.tagline}\r\n          </HeroDescription>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <br />\r\n    </HeroContainer>\r\n  );\r\n}\r\n","import { MovieModel } from 'core/models';\r\n\r\nexport interface DashboardMoviesCollectionState {\r\n  error: string;\r\n  isLoading: boolean;\r\n  data: MovieModel[];\r\n}\r\nexport interface DashboardMoviesState {\r\n  popular: DashboardMoviesCollectionState;\r\n  nowPlaying: DashboardMoviesCollectionState;\r\n  latest: DashboardMoviesCollectionState;\r\n  recommendations: DashboardMoviesCollectionState;\r\n  upcoming: DashboardMoviesCollectionState;\r\n  search: DashboardMoviesCollectionState;\r\n}\r\n\r\nexport interface DashboardState {\r\n  movies: DashboardMoviesState;\r\n}\r\n\r\nexport const dashboardInitialMoviesCollectionState: DashboardMoviesCollectionState =\r\n  {\r\n    error: '',\r\n    isLoading: true,\r\n    data: []\r\n  };\r\n\r\nexport const dashboardInitialState: DashboardState = {\r\n  movies: {\r\n    popular: dashboardInitialMoviesCollectionState,\r\n    nowPlaying: dashboardInitialMoviesCollectionState,\r\n    upcoming: dashboardInitialMoviesCollectionState,\r\n    latest: {\r\n      ...dashboardInitialMoviesCollectionState,\r\n      isLoading: false\r\n    },\r\n    recommendations: {\r\n      ...dashboardInitialMoviesCollectionState,\r\n      isLoading: false\r\n    },\r\n    search: {\r\n      ...dashboardInitialMoviesCollectionState,\r\n      isLoading: false\r\n    }\r\n  }\r\n};\r\n","import axios from 'axios';\r\nimport { apiPaths } from '../constants';\r\n\r\nexport default axios.create({\r\n  baseURL: `${apiPaths.themoviedbUrl}/3/`,\r\n  timeout: 1000\r\n});\r\n","import { isEmpty } from 'lodash';\r\n\r\nimport fetching from 'utils/fetching';\r\nimport { apiPaths } from '../../../../constants';\r\n\r\n//  https://developers.themoviedb.org/3/movies/get-now-playing\r\n//  Get a list of movies in theatres. This is a release type query that looks for all movies that have a release type of 2 or 3 within the specified date range.\r\n//  You can optionally specify a region prameter which will narrow the search to only look for theatrical release dates within the specified country.\r\nexport default async function getNowPlaying(page?: number) {\r\n  return new Promise(async function getNowPlayingResult(resolve, reject) {\r\n    const data = await fetching.get(`movie/now_playing`, {\r\n      params: { page, api_key: apiPaths.themoviedbApiKey }\r\n    });\r\n\r\n    if (!isEmpty(data)) return resolve(data);\r\n\r\n    return reject(data);\r\n  });\r\n}\r\n","import { isEmpty } from 'lodash';\r\n\r\nimport fetching from 'utils/fetching';\r\nimport { apiPaths } from '../../../../constants';\r\n\r\n//  https://developers.themoviedb.org/3/movies/get-popular-movies\r\n//  Get a list of the current popular movies on TMDb. This list updates daily.\r\nexport default async function getPopular(page?: number): Promise<any> {\r\n  return new Promise(async function getPopularResult(resolve, reject) {\r\n    const data = await fetching.get(`movie/popular`, {\r\n      params: { page, api_key: apiPaths.themoviedbApiKey }\r\n    });\r\n\r\n    if (!isEmpty(data)) return resolve(data);\r\n\r\n    return reject(data);\r\n  });\r\n}\r\n","import { isEmpty } from 'lodash';\r\n\r\nimport fetching from 'utils/fetching';\r\nimport { apiPaths } from '../../../../constants';\r\n\r\n//  https://developers.themoviedb.org/3/movies/get-latest-movie\r\n//  Get the most newly created movie. This is a live response and will continuously change.\r\nexport default async function getSearch(\r\n  query: string,\r\n  page?: number,\r\n  includeAdult: boolean = false\r\n) {\r\n  return new Promise(async function getSearchResult(resolve, reject) {\r\n    if (!query) return;\r\n\r\n    const data = await fetching.get(`search/movie`, {\r\n      params: {\r\n        query,\r\n        page,\r\n        include_adult: includeAdult,\r\n        api_key: apiPaths.themoviedbApiKey\r\n      }\r\n    });\r\n\r\n    if (!isEmpty(data)) return resolve(data);\r\n\r\n    return reject(data);\r\n  });\r\n}\r\n","import { isEmpty } from 'lodash';\r\n\r\nimport fetching from 'utils/fetching';\r\nimport { apiPaths } from '../../../../constants';\r\n\r\n//  https://developers.themoviedb.org/3/movies/get-upcoming\r\n//  Get a list of upcoming movies in theatres. This is a release type query that looks for all movies that have a release type of 2 or 3 within the specified date range.\r\n//  You can optionally specify a region prameter which will narrow the search to only look for theatrical release dates within the specified country.\r\nexport default async function getUpcoming(page?: number) {\r\n  return new Promise(async function getUpcomingResult(resolve, reject) {\r\n    const data = await fetching.get(`movie/upcoming`, {\r\n      params: { page, api_key: apiPaths.themoviedbApiKey }\r\n    });\r\n\r\n    if (!isEmpty(data)) return resolve(data);\r\n\r\n    return reject(data);\r\n  });\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { isEmpty } from 'lodash';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { MovieModel } from 'core/models';\r\nimport { HorizontalMovieList, SearchBar } from 'components/common';\r\nimport { ThemesState } from 'modules/themes';\r\nimport {\r\n  DashboardState,\r\n  setNowPlayingMovies,\r\n  setPopularMovies,\r\n  setSearchMovies,\r\n  setUpcomingMovies\r\n} from 'modules/dashboard/redux';\r\nimport {\r\n  getPopular,\r\n  getSearch,\r\n  getNowPlaying,\r\n  getUpcoming\r\n} from 'modules/dashboard/repositories';\r\n\r\nexport interface DashboardScreenProps {}\r\n\r\nexport const DashboardScreenContainer = styled.main`\r\n  width: 100%;\r\n  max-width: 100%;\r\n  min-width: 100%;\r\n`;\r\n\r\nexport default function DashboardScreen({}: DashboardScreenProps): JSX.Element {\r\n  const history = useHistory();\r\n  const dispatcher = useDispatch();\r\n\r\n  const [query, setQuery] = useState('');\r\n\r\n  const { current }: ThemesState = useSelector(\r\n    ({ theme }: { theme: ThemesState }) => theme\r\n  );\r\n\r\n  const { movies: dashboardMovies } = useSelector(\r\n    ({ dashboard }: { dashboard: DashboardState }) => dashboard\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (query) {\r\n      getSearch(query).then(({ data }: any) => {\r\n        dispatcher(\r\n          setSearchMovies({\r\n            error: isEmpty(data.results) ? 'Not found Movies' : '',\r\n            isLoading: false,\r\n            movies: data.results\r\n          })\r\n        );\r\n      });\r\n    }\r\n  }, [query]);\r\n\r\n  useEffect(() => {\r\n    getPopular().then(({ data }: any) => {\r\n      dispatcher(\r\n        setPopularMovies({\r\n          error: isEmpty(data.results) ? 'Not found Popular Movies' : '',\r\n          isLoading: false,\r\n          movies: data.results\r\n        })\r\n      );\r\n    });\r\n\r\n    getUpcoming().then(({ data }: any) => {\r\n      dispatcher(\r\n        setUpcomingMovies({\r\n          error: isEmpty(data.results) ? 'Not found Upcoming Movies' : '',\r\n          isLoading: false,\r\n          movies: data.results\r\n        })\r\n      );\r\n    });\r\n\r\n    getNowPlaying().then(({ data }: any) => {\r\n      dispatcher(\r\n        setNowPlayingMovies({\r\n          error: isEmpty(data.results) ? 'Not found NowPlaying Movies' : '',\r\n          isLoading: false,\r\n          movies: data.results\r\n        })\r\n      );\r\n    });\r\n  }, []);\r\n\r\n  const hasQueryData =\r\n    !!query &&\r\n    !!dashboardMovies &&\r\n    !!dashboardMovies?.search &&\r\n    !!dashboardMovies?.search?.data;\r\n\r\n  const onClickMovie = async (event: any, movie: MovieModel) => {\r\n    if (movie) {\r\n      const path: string = `/movie/${movie.id}`;\r\n\r\n      event?.preventDefault();\r\n\r\n      history?.push(path, movie);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DashboardScreenContainer className=\"dashboard_screen\">\r\n      <SearchBar query={query} setQuery={setQuery} />\r\n\r\n      {hasQueryData && (\r\n        <HorizontalMovieList\r\n          title=\"Results\"\r\n          posterHeight={current?.movieCardPosterHeight || 450}\r\n          posterWidth={current?.movieCardPosterWidth || 300}\r\n          error={dashboardMovies.search.error}\r\n          data={dashboardMovies.search.data}\r\n          isLoading={dashboardMovies.search.isLoading}\r\n          onClick={onClickMovie}\r\n        />\r\n      )}\r\n\r\n      {!hasQueryData && (\r\n        <>\r\n          <HorizontalMovieList\r\n            title=\"Top Popular\"\r\n            posterHeight={current?.movieCardPosterHeight || 450}\r\n            posterWidth={current?.movieCardPosterWidth || 300}\r\n            error={dashboardMovies.popular.error}\r\n            data={dashboardMovies.popular.data}\r\n            isLoading={dashboardMovies.popular.isLoading}\r\n            onClick={onClickMovie}\r\n          />\r\n\r\n          <HorizontalMovieList\r\n            title=\"Now Playing\"\r\n            posterHeight={current?.movieCardPosterHeight || 450}\r\n            posterWidth={current?.movieCardPosterWidth || 300}\r\n            error={dashboardMovies.nowPlaying.error}\r\n            data={dashboardMovies.nowPlaying.data}\r\n            isLoading={dashboardMovies.nowPlaying.isLoading}\r\n            onClick={onClickMovie}\r\n          />\r\n\r\n          <HorizontalMovieList\r\n            title=\"Upcoming\"\r\n            posterHeight={current?.movieCardPosterHeight || 450}\r\n            posterWidth={current?.movieCardPosterWidth || 300}\r\n            error={dashboardMovies.upcoming.error}\r\n            data={dashboardMovies.upcoming.data}\r\n            isLoading={dashboardMovies.upcoming.isLoading}\r\n            onClick={onClickMovie}\r\n          />\r\n        </>\r\n      )}\r\n    </DashboardScreenContainer>\r\n  );\r\n}\r\n","import { Dispatch } from 'redux';\r\n\r\nimport { MovieModel } from 'core/models';\r\nimport { DashboardActionsTypes, DashboardReducerAction } from '..';\r\n\r\nexport interface setSearchMoviesOptions {\r\n  isLoading: boolean;\r\n  error: string;\r\n  movies: MovieModel[];\r\n}\r\nexport function setSearchMovies({\r\n  movies = [],\r\n  isLoading = false,\r\n  error = ''\r\n}: setSearchMoviesOptions) {\r\n  return async (dispatch: Dispatch<DashboardReducerAction>) =>\r\n    dispatch({\r\n      type: DashboardActionsTypes.FETCH_SEARCH_MOVIES_DATA,\r\n      payload: {\r\n        isLoading,\r\n        error,\r\n        data: movies || []\r\n      }\r\n    });\r\n}\r\n","import { Dispatch } from 'redux';\r\n\r\nimport { MovieModel } from 'core/models';\r\nimport { DashboardActionsTypes, DashboardReducerAction } from '..';\r\n\r\nexport interface setPopularMoviesOptions {\r\n  isLoading: boolean;\r\n  error: string;\r\n  movies: MovieModel[];\r\n}\r\nexport function setPopularMovies({\r\n  movies = [],\r\n  isLoading = true,\r\n  error = ''\r\n}: setPopularMoviesOptions) {\r\n  return async (dispatch: Dispatch<DashboardReducerAction>) =>\r\n    dispatch({\r\n      type: DashboardActionsTypes.FETCH_POPULAR_MOVIES_DATA,\r\n      payload: {\r\n        isLoading,\r\n        error,\r\n        data: movies || []\r\n      }\r\n    });\r\n}\r\n","import { Dispatch } from 'redux';\r\n\r\nimport { MovieModel } from 'core/models';\r\nimport { DashboardActionsTypes, DashboardReducerAction } from '..';\r\n\r\nexport interface setUpcomingMoviesOptions {\r\n  isLoading: boolean;\r\n  error: string;\r\n  movies: MovieModel[];\r\n}\r\nexport function setUpcomingMovies({\r\n  movies = [],\r\n  isLoading = true,\r\n  error = ''\r\n}: setUpcomingMoviesOptions) {\r\n  return async (dispatch: Dispatch<DashboardReducerAction>) =>\r\n    dispatch({\r\n      type: DashboardActionsTypes.FETCH_UPCOMING_MOVIES_DATA,\r\n      payload: {\r\n        isLoading,\r\n        error,\r\n        data: movies || []\r\n      }\r\n    });\r\n}\r\n","import { Dispatch } from 'redux';\r\n\r\nimport { MovieModel } from 'core/models';\r\nimport { DashboardActionsTypes, DashboardReducerAction } from '..';\r\n\r\nexport interface setNowPlayingMoviesOptions {\r\n  isLoading: boolean;\r\n  error: string;\r\n  movies: MovieModel[];\r\n}\r\nexport function setNowPlayingMovies({\r\n  movies = [],\r\n  isLoading = true,\r\n  error = ''\r\n}: setNowPlayingMoviesOptions) {\r\n  return async (dispatch: Dispatch<DashboardReducerAction>) =>\r\n    dispatch({\r\n      type: DashboardActionsTypes.FETCH_NOW_PLAYING_MOVIES_DATA,\r\n      payload: {\r\n        isLoading,\r\n        error,\r\n        data: movies || []\r\n      }\r\n    });\r\n}\r\n","export interface signUpValidationOptions {\n  name: string;\n  email: string;\n  password: string;\n  repeatPassword: string;\n}\n\nexport interface signInValidationOptions {\n  email: string;\n  password: string;\n}\n\nexport const nameValidation = (name: string = '') =>\n  name.length === 0 || name.split(' ').length < 1;\n\nexport const emailValidation = (email: string = '') =>\n  email.trim().length === 0 ||\n  !/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(\n    email.trim()\n  );\n\nexport const passwordValidation = (password: string = '') =>\n  password.trim().length < 8;\n\nexport const repeatPasswordValidation = (\n  password: string = '',\n  repeatPassword: string = ''\n) => passwordValidation(password) || repeatPassword !== password;\n\nexport const signUpValidation = ({\n  name = '',\n  email = '',\n  password = '',\n  repeatPassword = ''\n}: signUpValidationOptions) =>\n  nameValidation(name) ||\n  emailValidation(email) ||\n  passwordValidation(password) ||\n  repeatPasswordValidation(password, repeatPassword);\n\nexport const signInValidation = ({\n  email = '',\n  password = ''\n}: signInValidationOptions) =>\n  emailValidation(email) || passwordValidation(password);\n","import React, { ReactElement } from 'react';\r\nimport styled from 'styled-components';\r\nimport { nanoid } from 'nanoid';\r\nimport { find } from 'lodash';\r\nimport { Link } from 'react-router-dom';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nimport { handlersCollection, HandlerType } from './handlers';\r\n\r\nexport interface NavigationProps {\r\n  blackList?: string[];\r\n}\r\n\r\nconst NavigationContainer = styled.nav`\r\n  display: grid;\r\n  background: var(--menu-container-background-color);\r\n`;\r\n\r\nconst NavigationList = styled.ul`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: stretch;\r\n`;\r\n\r\nconst NavigationListItem = styled.li`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-template-rows: 1fr;\r\n\r\n  &:last-child {\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nconst NavigationListItemLink = styled(Link)`\r\n  display: flex;\r\n  text-decoration: none;\r\n  color: var(--menu-item-text-color);\r\n  padding: 1rem;\r\n  transition: all linear 150ms;\r\n  cursor: pointer;\r\n  margin: 0 0 0.5rem 0;\r\n\r\n  &:hover {\r\n    background: var(--menu-item-hover-background-color);\r\n  }\r\n`;\r\n\r\nconst NavigationListItemLinkText = styled(Typography)``;\r\n\r\nexport default function Navigation({\r\n  blackList = []\r\n}: NavigationProps): ReactElement {\r\n  return (\r\n    <NavigationContainer className=\"navigation_menu\">\r\n      <NavigationList className=\"navigation_menu__list\">\r\n        {handlersCollection\r\n          .filter(\r\n            (handler: HandlerType) =>\r\n              //  Path Eval\r\n              !!handler.path &&\r\n              //  Black List Eval\r\n              !find(blackList, (name: string = '') =>\r\n                new RegExp(name, 'gi').test(handler?.name || '')\r\n              )\r\n          )\r\n          .map((handler: HandlerType) => (\r\n            <NavigationListItem\r\n              key={nanoid()}\r\n              className=\"navigation_menu__list__item\"\r\n            >\r\n              <NavigationListItemLink\r\n                to={handler.path || '/'}\r\n                className=\"navigation_menu__list__item__link\"\r\n              >\r\n                <NavigationListItemLinkText\r\n                  className=\"navigation_menu__list__item__link__text\"\r\n                  variant=\"body1\"\r\n                >\r\n                  {handler.name}\r\n                </NavigationListItemLinkText>\r\n              </NavigationListItemLink>\r\n            </NavigationListItem>\r\n          ))}\r\n      </NavigationList>\r\n    </NavigationContainer>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { nanoid } from 'nanoid';\r\n\r\nimport { HandlerType } from './handlers';\r\n\r\nexport interface NavigatorProps {\r\n  routes: HandlerType[];\r\n}\r\n\r\nexport default function Navigator({ routes }: NavigatorProps): JSX.Element {\r\n  return (\r\n    <Switch>\r\n      {routes.map((route: any) => (\r\n        <Route key={nanoid()} {...route} />\r\n      ))}\r\n    </Switch>\r\n  );\r\n}\r\n","enum MovieActionsTypes {\r\n  FETCH_INITIAL_DATA = '@DETAILS -> FETCH: initial Data'\r\n}\r\n\r\nexport default MovieActionsTypes;\r\n","import { Redirect } from 'react-router-dom';\r\n\r\nimport { DashboardScreen } from 'modules/dashboard';\r\nimport {isDevelopment} from \"utils\";\r\nimport { HandlerType } from '.';\r\nimport { Navigator } from '..';\r\nimport pkg from '../../../../package.json';\r\n\r\nconst ProductionDashboardSubHandlers: JSX.Element = <Navigator routes={[\r\n  {\r\n    path: '/',\r\n    component: <Redirect to={`/${pkg.name}`} />,\r\n    name: 'Dashboard Root',\r\n    exact: true,\r\n    strict: false,\r\n    sensitive: false\r\n  },\r\n  {\r\n    path: `/${pkg.name}`,\r\n    component: DashboardScreen,\r\n    name: 'Dashboard Main',\r\n    exact: false,\r\n    strict: false,\r\n    sensitive: false\r\n  }\r\n]} />;\r\n\r\nconst DevelopmentDashboardSubHandlers = DashboardScreen;\r\n\r\nconst routes = isDevelopment()\r\n  ? DevelopmentDashboardSubHandlers\r\n  : ProductionDashboardSubHandlers;\r\n\r\nconst DashboardHandlers: HandlerType = {\r\n  path: '/',\r\n  name: 'Dashboard',\r\n  component: routes,\r\n  exact: true,\r\n  strict: false,\r\n  sensitive: false\r\n};\r\n\r\nexport default DashboardHandlers;\r\n","import { isEmpty } from 'lodash';\r\n\r\nimport fetching from 'utils/fetching';\r\nimport { apiPaths } from '../../../../constants';\r\n\r\n//  https://developers.themoviedb.org/3/movies/get-movie-details\r\n//  Get the primary information about a movie.\r\n//  Supports [append_to_response]. Read more about this https://developers.themoviedb.org/3/getting-started/append-to-response.\r\nexport default async function getDetails(movieId: number) {\r\n  return new Promise(async function getDetailsResult(resolve, reject) {\r\n    const data = await fetching.get(`movie/${movieId}`, {\r\n      params: { api_key: apiPaths.themoviedbApiKey }\r\n    });\r\n\r\n    if (!isEmpty(data)) return resolve(data);\r\n\r\n    return reject(data);\r\n  });\r\n}\r\n","import { MovieDetailsModel } from 'core/models';\r\n\r\nexport interface MovieState {\r\n  details: MovieDetailsModel;\r\n}\r\n\r\nexport const movieInitialState: MovieState = {\r\n  details: {\r\n    adult: false,\r\n    backdrop_path: '',\r\n    belongs_to_collection: {\r\n      id: 0,\r\n      name: '',\r\n      poster_path: '',\r\n      backdrop_path: ''\r\n    },\r\n    budget: 0,\r\n    genres: [],\r\n    homepage: '',\r\n    id: 0,\r\n    imdb_id: '',\r\n    original_language: '',\r\n    original_title: '',\r\n    overview: '',\r\n    popularity: 0,\r\n    poster_path: '',\r\n    production_companies: [],\r\n    production_countries: [\r\n      {\r\n        iso_3166_1: '',\r\n        name: ''\r\n      }\r\n    ],\r\n    release_date: '',\r\n    revenue: 0,\r\n    runtime: 0,\r\n    spoken_languages: [],\r\n    status: '',\r\n    tagline: '',\r\n    title: '',\r\n    video: false,\r\n    vote_average: 0,\r\n    vote_count: 0\r\n  }\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { Hero } from 'components/common';\r\nimport { getDetails } from 'modules/movie/repositories';\r\nimport { MovieState, onMovieFetchInitialData } from 'modules/movie/redux';\r\n\r\nexport interface MovieScreenProps {}\r\n\r\nexport const MovieScreenContainer = styled.main``;\r\n\r\nexport default function MovieScreen({}: MovieScreenProps): JSX.Element {\r\n  const dispatcher = useDispatch();\r\n\r\n  const { id }: { id: string } = useParams();\r\n\r\n  const { details } = useSelector(({ movie }: { movie: MovieState }) => movie);\r\n\r\n  useEffect(() => {\r\n    getDetails(Number(id)).then(({ data }: any) => {\r\n      dispatcher(onMovieFetchInitialData({ payload: data }));\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <MovieScreenContainer className=\"movie_screen\">\r\n      <Hero data={details} height=\"80vh\" />\r\n    </MovieScreenContainer>\r\n  );\r\n}\r\n","import { NotFountScreen } from 'modules/notFount';\r\n\r\nexport default {\r\n  // path: '*',\r\n  name: 'Page 404',\r\n  component: NotFountScreen,\r\n  exact: false,\r\n  strict: false,\r\n  sensitive: false,\r\n  showInAppBar: false\r\n};\r\n","enum NotFountActionsTypes {\r\n  FETCH_INITIAL_DATA = '@NOT_FOUNT -> FETCH: initial Data'\r\n}\r\n\r\nexport default NotFountActionsTypes;\r\n","import { ComponentClass, FC } from 'react';\r\nimport DashboardHandlers from './DashboardHandlers';\r\nimport MovieHandlers from './MovieHandlers';\r\nimport NotFountHandlers from './NotFountHandlers';\r\n\r\nexport interface HandlerType {\r\n  path?: string;\r\n  name?: string;\r\n  component: FC<any> | JSX.Element | ComponentClass;\r\n  exact?: boolean;\r\n  strict?: boolean;\r\n  sensitive?: boolean;\r\n}\r\n\r\nexport const handlersCollection: HandlerType[] = [\r\n  DashboardHandlers,\r\n  MovieHandlers,\r\n  NotFountHandlers\r\n];\r\ndebugger\r\n\r\nexport { MovieHandlers, DashboardHandlers, NotFountHandlers };\r\n","import { MovieScreen } from 'modules/movie';\r\nimport { isDevelopment } from 'utils';\r\nimport { HandlerType } from '.';\r\nimport pkg from '../../../../package.json';\r\n\r\nconst MovieHandlers: HandlerType = {\r\n  path: `${isDevelopment() ? pkg.name : ''}/movie/:id`,\r\n  name: 'Movie',\r\n  component: MovieScreen,\r\n  exact: false,\r\n  strict: false,\r\n  sensitive: false\r\n};\r\n\r\nexport default MovieHandlers;\r\n","import { Dispatch } from 'redux';\r\n\r\nimport { MovieDetailsModel } from 'core/models';\r\nimport { movieActionsTypes, MovieReducerAction } from '..';\r\n\r\nexport interface onMovieFetchInitialDataOptions {\r\n  payload: MovieDetailsModel;\r\n}\r\nexport function onMovieFetchInitialData({\r\n  payload\r\n}: onMovieFetchInitialDataOptions) {\r\n  return (dispatch: Dispatch<MovieReducerAction>) =>\r\n    dispatch({\r\n      type: movieActionsTypes.FETCH_INITIAL_DATA,\r\n      payload\r\n    });\r\n}\r\n","import React from 'react';\r\n\r\nexport interface NotFountScreenProps {}\r\n\r\nexport default function NotFountScreen({}: NotFountScreenProps): JSX.Element {\r\n  return (\r\n    <main className=\"not_fount_screen\">\r\n      <header className=\"not_fount_screen__header\">\r\n        <h1 className=\"not_fount_screen__header__title\">NotFount Screen</h1>\r\n      </header>\r\n    </main>\r\n  );\r\n}\r\n","import { NotFountActionsTypes, notFountInitialState, NotFountState } from '..';\r\n\r\nexport interface OnNotFountActionsPayload {}\r\n\r\nexport interface OnNotFountFetchAction {\r\n  type: NotFountActionsTypes;\r\n  payload?: OnNotFountActionsPayload;\r\n}\r\n\r\nexport function onNotFountFetchInitialData(\r\n  state: NotFountState = notFountInitialState,\r\n  action: OnNotFountFetchAction\r\n): NotFountState {\r\n  return { ...state, data: action.payload };\r\n}\r\n","export interface NotFountState {\r\n  data: any;\r\n}\r\n\r\nexport const notFountInitialState = {\r\n  data: {}\r\n};\r\n","enum ThemesActionsTypes {\r\n  FETCH_INITIAL_DATA = '@DASHBOARD -> FETCH: initial Data'\r\n}\r\n\r\nexport default ThemesActionsTypes;\r\n","import {\r\n  ThemeData,\r\n  ThemesActionsTypes,\r\n  themesInitialState,\r\n  ThemesState\r\n} from '..';\r\n\r\nexport interface OnThemesFetchAction {\r\n  type: ThemesActionsTypes;\r\n  payload?: ThemeData;\r\n}\r\n\r\nexport function onThemesFetchInitialData(\r\n  state: ThemesState = themesInitialState,\r\n  action: OnThemesFetchAction\r\n): ThemesState {\r\n  return { ...state, current: action.payload };\r\n}\r\n","export default {\n  //  Main\n  mainContainerBackgroundColor: '#FFFFFF',\n  //  Menu\n  menuWidth: 275,\n  menuContainerBackgroundColor: '#FFFFFF',\n  //  Menu Item\n  menuItemHoverBackgroundColor: '#2F313A',\n  menuItemHoverTextColor: '#FFFFFF',\n  menuItemTextColor: '#1C1F2A',\n  //  Hero\n  //  Hero Item\n  heroItemBackgroundColor: 'rgba(0, 0, 0, 0.4)',\n  //  Movie Card\n  movieCardContentContainerBackgroundColor: '#FFFFFF',\n  movieCardContentContainerHoverBackgroundColor: 'rgba(28, 31, 42, 0.7)',\n  movieCardContentTextColor: '#2F313A',\n  movieCardPosterHeight: 450,\n  movieCardPosterWidth: 300,\n  //  Typography\n  h1: 96,\n  h2: 60,\n  h3: 48,\n  h4: 34,\n  h5: 24,\n  h6: 20,\n  subTitle1: 16,\n  subTitle2: 14,\n  body1: 16,\n  body2: 14,\n  buttonText: 14,\n  captionText: 12,\n  overlineText: 12\n};\n","import { darkTheme } from 'config';\r\n\r\nexport interface ThemeData {\r\n  //  Main\r\n  mainContainerBackgroundColor: string;\r\n  //  Menu\r\n  menuContainerBackgroundColor: string;\r\n  menuWidth: number;\r\n  //  Menu Item\r\n  menuItemHoverBackgroundColor: string;\r\n  menuItemHoverTextColor: string;\r\n  menuItemTextColor: string;\r\n  //  Hero\r\n  //  Hero Item\r\n  heroItemBackgroundColor: string;\r\n  //  Movie Card\r\n  movieCardContentContainerHoverBackgroundColor: string;\r\n  movieCardContentContainerBackgroundColor: string;\r\n  movieCardContentTextColor: string;\r\n  movieCardPosterHeight: number;\r\n  movieCardPosterWidth: number;\r\n  //  Typography\r\n  h1: number;\r\n  h2: number;\r\n  h3: number;\r\n  h4: number;\r\n  h5: number;\r\n  h6: number;\r\n  subTitle1: number;\r\n  subTitle2: number;\r\n  body1: number;\r\n  body2: number;\r\n  buttonText: number;\r\n  captionText: number;\r\n  overlineText: number;\r\n}\r\n\r\nexport interface ThemesState {\r\n  darkMode: boolean;\r\n  current?: ThemeData;\r\n}\r\n\r\nexport const themesInitialState = {\r\n  darkMode: true,\r\n  current: darkTheme\r\n};\r\n","export default {\n  //  Main\n  mainContainerBackgroundColor: '#2F313A',\n  //  Menu\n  menuWidth: 275,\n  menuContainerBackgroundColor: '#1C1F2A',\n  //  Menu Item\n  menuItemHoverBackgroundColor: '#2F313A',\n  menuItemHoverTextColor: '#FFFFFF',\n  menuItemTextColor: '#FFFFFF',\n  //  Hero\n  //  Hero Item\n  heroItemBackgroundColor: 'rgba(0, 0, 0, 0.4)',\n  //  Movie Card\n  movieCardContentContainerBackgroundColor: '#2F313A',\n  movieCardContentContainerHoverBackgroundColor: 'rgba(96, 98, 105, 0.7)',\n  movieCardContentTextColor: '#FFFFFF',\n  movieCardPosterHeight: 450,\n  movieCardPosterWidth: 300,\n  //  Typography\n  h1: 96,\n  h2: 60,\n  h3: 48,\n  h4: 34,\n  h5: 24,\n  h6: 20,\n  subTitle1: 16,\n  subTitle2: 14,\n  body1: 16,\n  body2: 14,\n  buttonText: 14,\n  captionText: 12,\n  overlineText: 12\n};\n","import { combineReducers } from 'redux';\r\n\r\nimport dashboardReducer from 'modules/dashboard/redux/reducer';\r\nimport movieReducer from 'modules/movie/redux/reducer';\r\nimport notFountReducer from 'modules/notFount/redux/reducer';\r\nimport ThemeReducer from 'modules/themes/redux/reducer';\r\n\r\nexport default combineReducers({\r\n  dashboard: dashboardReducer,\r\n  movie: movieReducer,\r\n  notFount: notFountReducer,\r\n  theme: ThemeReducer\r\n});\r\n","import {\r\n  DashboardActionsTypes,\r\n  dashboardInitialState,\r\n  DashboardMoviesCollectionState,\r\n  DashboardState\r\n} from '.';\r\n\r\nexport type DashboardReducerAction = {\r\n  type: string;\r\n  payload?: DashboardMoviesCollectionState;\r\n};\r\n\r\nexport default function dashboardReducer(\r\n  state: DashboardState = dashboardInitialState,\r\n  action: DashboardReducerAction\r\n): DashboardState {\r\n  switch (action.type) {\r\n    case DashboardActionsTypes.FETCH_POPULAR_MOVIES_DATA:\r\n      return {\r\n        ...state,\r\n        movies: {\r\n          ...state.movies,\r\n          popular: {\r\n            ...state.movies.popular,\r\n            ...action.payload\r\n          }\r\n        }\r\n      };\r\n\r\n    case DashboardActionsTypes.FETCH_RECOMMENDATIONS_MOVIES_DATA:\r\n      return {\r\n        ...state,\r\n        movies: {\r\n          ...state.movies,\r\n          recommendations: {\r\n            ...state.movies.recommendations,\r\n            ...action.payload\r\n          }\r\n        }\r\n      };\r\n\r\n    case DashboardActionsTypes.FETCH_UPCOMING_MOVIES_DATA:\r\n      return {\r\n        ...state,\r\n        movies: {\r\n          ...state.movies,\r\n          upcoming: {\r\n            ...state.movies.upcoming,\r\n            ...action.payload\r\n          }\r\n        }\r\n      };\r\n\r\n    case DashboardActionsTypes.FETCH_SEARCH_MOVIES_DATA:\r\n      return {\r\n        ...state,\r\n        movies: {\r\n          ...state.movies,\r\n          search: {\r\n            ...state.movies.search,\r\n            ...action.payload\r\n          }\r\n        }\r\n      };\r\n\r\n    case DashboardActionsTypes.FETCH_LATEST_MOVIES_DATA:\r\n      return {\r\n        ...state,\r\n        movies: {\r\n          ...state.movies,\r\n          latest: {\r\n            ...state.movies.latest,\r\n            ...action.payload\r\n          }\r\n        }\r\n      };\r\n\r\n    case DashboardActionsTypes.FETCH_NOW_PLAYING_MOVIES_DATA:\r\n      return {\r\n        ...state,\r\n        movies: {\r\n          ...state.movies,\r\n          nowPlaying: {\r\n            ...state.movies.nowPlaying,\r\n            ...action.payload\r\n          }\r\n        }\r\n      };\r\n\r\n    case DashboardActionsTypes.FETCH_INITIAL_DATA:\r\n      return {\r\n        ...state,\r\n        movies: {\r\n          ...state.movies,\r\n          popular: {\r\n            ...state.movies.popular\r\n          }\r\n        }\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { MovieDetailsModel } from 'core/models';\r\nimport { movieActionsTypes, movieInitialState, MovieState } from '.';\r\n\r\nexport interface OnMovieFetchAction {\r\n  type: movieActionsTypes;\r\n  payload?: MovieDetailsModel;\r\n}\r\nexport type MovieReducerAction = OnMovieFetchAction;\r\n\r\nexport default function movieReducer(\r\n  state: MovieState = movieInitialState,\r\n  action: MovieReducerAction\r\n): MovieState {\r\n  switch (action.type) {\r\n    case movieActionsTypes.FETCH_INITIAL_DATA:\r\n      return {\r\n        ...state,\r\n        details: {\r\n          ...state.details,\r\n          ...action.payload\r\n        }\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  NotFountActionsTypes,\r\n  notFountInitialState,\r\n  NotFountState,\r\n  OnNotFountFetchAction,\r\n  onNotFountFetchInitialData\r\n} from '.';\r\n\r\nexport type NotFountReducerAction = OnNotFountFetchAction;\r\n\r\nexport default function notFountReducer(\r\n  state: NotFountState = notFountInitialState,\r\n  action: NotFountReducerAction\r\n) {\r\n  switch (action.type) {\r\n    case NotFountActionsTypes.FETCH_INITIAL_DATA:\r\n      return onNotFountFetchInitialData(state, action);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  ThemesActionsTypes,\r\n  themesInitialState,\r\n  ThemesState,\r\n  OnThemesFetchAction,\r\n  onThemesFetchInitialData\r\n} from '.';\r\n\r\nexport type ThemesReducerAction = OnThemesFetchAction;\r\n\r\nexport default function themesReducer(\r\n  state: ThemesState = themesInitialState,\r\n  action: ThemesReducerAction\r\n) {\r\n  switch (action.type) {\r\n    case ThemesActionsTypes.FETCH_INITIAL_DATA:\r\n      return onThemesFetchInitialData(state, action);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import thunk from 'redux-thunk';\r\nimport { applyMiddleware, compose, createStore } from 'redux';\r\nimport { reducers } from '.';\r\n\r\nconst withDevTools =\r\n  // @ts-ignore\r\n  typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\r\n\r\n// @ts-ignore\r\nconst devTools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n  // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\r\n});\r\n\r\nconst middlewares = applyMiddleware(thunk);\r\n\r\nconst composeEnhancers = withDevTools ? devTools : compose;\r\n\r\nconst enhancer = composeEnhancers(\r\n  middlewares\r\n  // other store enhancers if any\r\n);\r\n\r\nconst store = createStore(reducers, enhancer);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { QueryClientProvider } from 'react-query';\r\nimport SwiperCore, { Navigation, Pagination, Scrollbar, A11y } from 'swiper';\r\nimport { createBrowserHistory } from 'history';\r\nimport { Router } from 'react-router-dom';\r\n\r\nimport { queryClient, store, ThemeManager } from '.';\r\n\r\n// install Swiper modules\r\nSwiperCore.use([Navigation, Pagination, Scrollbar, A11y]);\r\n\r\nconst history = createBrowserHistory();\r\n\r\nexport interface DataManagerProviderProps {\r\n  children?: JSX.Element;\r\n}\r\n\r\nexport default function DataManagerProvider({\r\n  children\r\n}: DataManagerProviderProps): JSX.Element {\r\n  return (\r\n    <Router history={history}>\r\n      <QueryClientProvider client={queryClient}>\r\n        <Provider store={store}>\r\n          <ThemeManager>{children}</ThemeManager>\r\n        </Provider>\r\n      </QueryClientProvider>\r\n    </Router>\r\n  );\r\n}\r\n","import { QueryClient } from 'react-query';\n\nexport default new QueryClient();\n","import { createGlobalStyle } from 'styled-components';\r\nimport { isNumber, kebabCase } from 'lodash';\r\n\r\nimport { ThemesState } from 'modules/themes';\r\n\r\nexport default createGlobalStyle`\r\n  :root {\r\n    ${({ theme }: { theme: ThemesState }) =>\r\n      Object.entries(theme?.current || {})\r\n        .map(\r\n          ([key, value]) =>\r\n            `--${kebabCase(key)}: ${isNumber(value) ? `${value}px` : value};`\r\n        )\r\n        .join(' ')};\r\n  }\r\n  \r\n  *,\r\n  *::after,\r\n  *::before {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n\r\n  html, body {\r\n    display: grid;\r\n  }\r\n  \r\n  body {\r\n    background: $mainContainerBackgroundColor;\r\n  }\r\n\r\n  html,\r\n  body,\r\n  #root {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport { useSelector } from 'react-redux';\r\nimport {CssBaseline} from \"@material-ui/core\";\r\n\r\nimport { ThemesState } from 'modules/themes';\r\nimport { GlobalStyles } from '.';\r\n\r\nexport interface ThemeManagerProps {\r\n  children?: JSX.Element;\r\n}\r\n\r\nexport default function ThemeManager({\r\n  children\r\n}: ThemeManagerProps): JSX.Element {\r\n  const theme: ThemesState = useSelector(({ theme }: any) => theme);\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n\r\n      <GlobalStyles />\r\n\r\n      {children}\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","import React, { FC } from 'react';\r\nimport styled from 'styled-components';\r\nimport { ThemesState } from '../../modules/themes';\r\n\r\nexport interface ImaxLayoutProps {\r\n  children: JSX.Element | JSX.Element[];\r\n  menuWidth?: number;\r\n}\r\n\r\nexport interface ImaxLayoutContainerProps {\r\n  menuWidth?: number;\r\n  theme?: ThemesState;\r\n  className?: string;\r\n}\r\n\r\nexport const ImaxLayoutContainer: FC<ImaxLayoutContainerProps> = styled.div`\r\n  width: 100%;\r\n  height: 100vh;\r\n  min-height: 100vh;\r\n  max-height: 100vh;\r\n  display: grid;\r\n  grid-template-rows: 1fr;\r\n  grid-template-columns: ${({\r\n      menuWidth = 275,\r\n      theme\r\n    }: ImaxLayoutContainerProps) =>\r\n      theme?.current?.menuWidth || menuWidth}px 1fr;\r\n`;\r\n\r\nexport default function ImaxLayout({\r\n  children,\r\n  menuWidth\r\n}: ImaxLayoutProps): JSX.Element {\r\n  return (\r\n    <ImaxLayoutContainer\r\n      className=\"imax_layout_container\"\r\n      menuWidth={menuWidth}\r\n    >\r\n      {children}\r\n    </ImaxLayoutContainer>\r\n  );\r\n}\r\n","import React from 'react';\n\nimport { handlersCollection, HandlerType } from 'config/routes/handlers';\nimport { Navigation, Navigator } from 'config/routes';\nimport { DataManagerProvider } from 'core/settings';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { ImaxLayout } from 'components/layouts';\n\nimport 'core/styles';\n\nexport default function App(): JSX.Element {\n  const handlers: HandlerType[] = handlersCollection;\n\n  return (\n    <DataManagerProvider>\n      <Router>\n        <ImaxLayout>\n          <Navigation blackList={['Movie']} />\n\n          <Navigator routes={handlers} />\n        </ImaxLayout>\n      </Router>\n    </DataManagerProvider>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'App';\nimport reportWebVitals from 'reportWebVitals';\n\nconst rootTag = document.getElementById('root');\n\nReactDOM.render(<App />, rootTag);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}